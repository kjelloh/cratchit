#include "charset.hpp"
#include <iostream>
#include <iomanip>

namespace charset {

	namespace ISO_8859_1 {

		// Unicode code points 0x00 to 0xFF maps directly to ISO 8859-1 (ISO Latin).
		// So we have to convert UTF-8 to Unicode and then truncate the code point to the low value byte.
		// Code points above 0xFF has NO obvious representation in ISO 8859-1 (I suppose we could cherry pick to get some similar ISO 8859-1 glyph but...)

		char16_t iso8859ToUnicode(char ch8859) {
			return static_cast<uint8_t>(ch8859);
		}
	
		cratchit_unicode_string iso8859ToUnicode(std::string s8859) {
			cratchit_unicode_string result{};
			std::transform(s8859.begin(),s8859.end(),std::back_inserter(result),[](char ch){
				return iso8859ToUnicode(ch);
			});
      if (false) {
        std::cout << "\niso8859ToUnicode(";
        for (auto ch : s8859) std::cout << " " << std::hex << static_cast<unsigned int>(ch) << std::dec;
        std::cout << ") --> ";
        for (auto ch : result) std::cout << " " << std::hex << static_cast<unsigned int>(ch) << std::dec;
      }
			return result;
		}

		uint8_t UnicodeToISO8859(char16_t unicode) {
			uint8_t result{'?'};
			if (unicode<=0xFF) result = unicode;
			return result;
		} 

	}

	namespace CP437 {

		// from http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/PC/CP437.TXT
		std::map<char,char16_t> cp437ToUnicodeMap{
		{0x0,0x0}
		,{0x1,0x1}
		,{0x2,0x2}
		,{0x3,0x3}
		,{0x4,0x4}
		,{0x5,0x5}
		,{0x6,0x6}
		,{0x7,0x7}
		,{0x8,0x8}
		,{0x9,0x9}
		,{0xA,0xA}
		,{0xB,0xB}
		,{0xC,0xC}
		,{0xD,0xD}
		,{0xE,0xE}
		,{0xF,0xF}
		,{0x10,0x10}
		,{0x11,0x11}
		,{0x12,0x12}
		,{0x13,0x13}
		,{0x14,0x14}
		,{0x15,0x15}
		,{0x16,0x16}
		,{0x17,0x17}
		,{0x18,0x18}
		,{0x19,0x19}
		,{0x1A,0x1A}
		,{0x1B,0x1B}
		,{0x1C,0x1C}
		,{0x1D,0x1D}
		,{0x1E,0x1E}
		,{0x1F,0x1F}
		,{0x20,0x20}
		,{0x21,0x21}
		,{0x22,0x22}
		,{0x23,0x23}
		,{0x24,0x24}
		,{0x25,0x25}
		,{0x26,0x26}
		,{0x27,0x27}
		,{0x28,0x28}
		,{0x29,0x29}
		,{0x2A,0x2A}
		,{0x2B,0x2B}
		,{0x2C,0x2C}
		,{0x2D,0x2D}
		,{0x2E,0x2E}
		,{0x2F,0x2F}
		,{0x30,0x30}
		,{0x31,0x31}
		,{0x32,0x32}
		,{0x33,0x33}
		,{0x34,0x34}
		,{0x35,0x35}
		,{0x36,0x36}
		,{0x37,0x37}
		,{0x38,0x38}
		,{0x39,0x39}
		,{0x3A,0x3A}
		,{0x3B,0x3B}
		,{0x3C,0x3C}
		,{0x3D,0x3D}
		,{0x3E,0x3E}
		,{0x3F,0x3F}
		,{0x40,0x40}
		,{0x41,0x41}
		,{0x42,0x42}
		,{0x43,0x43}
		,{0x44,0x44}
		,{0x45,0x45}
		,{0x46,0x46}
		,{0x47,0x47}
		,{0x48,0x48}
		,{0x49,0x49}
		,{0x4A,0x4A}
		,{0x4B,0x4B}
		,{0x4C,0x4C}
		,{0x4D,0x4D}
		,{0x4E,0x4E}
		,{0x4F,0x4F}
		,{0x50,0x50}
		,{0x51,0x51}
		,{0x52,0x52}
		,{0x53,0x53}
		,{0x54,0x54}
		,{0x55,0x55}
		,{0x56,0x56}
		,{0x57,0x57}
		,{0x58,0x58}
		,{0x59,0x59}
		,{0x5A,0x5A}
		,{0x5B,0x5B}
		,{0x5C,0x5C}
		,{0x5D,0x5D}
		,{0x5E,0x5E}
		,{0x5F,0x5F}
		,{0x60,0x60}
		,{0x61,0x61}
		,{0x62,0x62}
		,{0x63,0x63}
		,{0x64,0x64}
		,{0x65,0x65}
		,{0x66,0x66}
		,{0x67,0x67}
		,{0x68,0x68}
		,{0x69,0x69}
		,{0x6A,0x6A}
		,{0x6B,0x6B}
		,{0x6C,0x6C}
		,{0x6D,0x6D}
		,{0x6E,0x6E}
		,{0x6F,0x6F}
		,{0x70,0x70}
		,{0x71,0x71}
		,{0x72,0x72}
		,{0x73,0x73}
		,{0x74,0x74}
		,{0x75,0x75}
		,{0x76,0x76}
		,{0x77,0x77}
		,{0x78,0x78}
		,{0x79,0x79}
		,{0x7A,0x7A}
		,{0x7B,0x7B}
		,{0x7C,0x7C}
		,{0x7D,0x7D}
		,{0x7E,0x7E}
		,{0x7F,0x7F}
		,{0x80,0xC7}
		,{0x81,0xFC}
		,{0x82,0xE9}
		,{0x83,0xE2}
		,{0x84,0xE4}
		,{0x85,0xE0}
		,{0x86,0xE5}
		,{0x87,0xE7}
		,{0x88,0xEA}
		,{0x89,0xEB}
		,{0x8A,0xE8}
		,{0x8B,0xEF}
		,{0x8C,0xEE}
		,{0x8D,0xEC}
		,{0x8E,0xC4}
		,{0x8F,0xC5}
		,{0x90,0xC9}
		,{0x91,0xE6}
		,{0x92,0xC6}
		,{0x93,0xF4}
		,{0x94,0xF6}
		,{0x95,0xF2}
		,{0x96,0xFB}
		,{0x97,0xF9}
		,{0x98,0xFF}
		,{0x99,0xD6}
		,{0x9A,0xDC}
		,{0x9B,0xA2}
		,{0x9C,0xA3}
		,{0x9D,0xA5}
		,{0x9E,0x20A7}
		,{0x9F,0x192}
		,{0xA0,0xE1}
		,{0xA1,0xED}
		,{0xA2,0xF3}
		,{0xA3,0xFA}
		,{0xA4,0xF1}
		,{0xA5,0xD1}
		,{0xA6,0xAA}
		,{0xA7,0xBA}
		,{0xA8,0xBF}
		,{0xA9,0x2310}
		,{0xAA,0xAC}
		,{0xAB,0xBD}
		,{0xAC,0xBC}
		,{0xAD,0xA1}
		,{0xAE,0xAB}
		,{0xAF,0xBB}
		,{0xB0,0x2591}
		,{0xB1,0x2592}
		,{0xB2,0x2593}
		,{0xB3,0x2502}
		,{0xB4,0x2524}
		,{0xB5,0x2561}
		,{0xB6,0x2562}
		,{0xB7,0x2556}
		,{0xB8,0x2555}
		,{0xB9,0x2563}
		,{0xBA,0x2551}
		,{0xBB,0x2557}
		,{0xBC,0x255D}
		,{0xBD,0x255C}
		,{0xBE,0x255B}
		,{0xBF,0x2510}
		,{0xC0,0x2514}
		,{0xC1,0x2534}
		,{0xC2,0x252C}
		,{0xC3,0x251C}
		,{0xC4,0x2500}
		,{0xC5,0x253C}
		,{0xC6,0x255E}
		,{0xC7,0x255F}
		,{0xC8,0x255A}
		,{0xC9,0x2554}
		,{0xCA,0x2569}
		,{0xCB,0x2566}
		,{0xCC,0x2560}
		,{0xCD,0x2550}
		,{0xCE,0x256C}
		,{0xCF,0x2567}
		,{0xD0,0x2568}
		,{0xD1,0x2564}
		,{0xD2,0x2565}
		,{0xD3,0x2559}
		,{0xD4,0x2558}
		,{0xD5,0x2552}
		,{0xD6,0x2553}
		,{0xD7,0x256B}
		,{0xD8,0x256A}
		,{0xD9,0x2518}
		,{0xDA,0x250C}
		,{0xDB,0x2588}
		,{0xDC,0x2584}
		,{0xDD,0x258C}
		,{0xDE,0x2590}
		,{0xDF,0x2580}
		,{0xE0,0x3B1}
		,{0xE1,0xDF}
		,{0xE2,0x393}
		,{0xE3,0x3C0}
		,{0xE4,0x3A3}
		,{0xE5,0x3C3}
		,{0xE6,0xB5}
		,{0xE7,0x3C4}
		,{0xE8,0x3A6}
		,{0xE9,0x398}
		,{0xEA,0x3A9}
		,{0xEB,0x3B4}
		,{0xEC,0x221E}
		,{0xED,0x3C6}
		,{0xEE,0x3B5}
		,{0xEF,0x2229}
		,{0xF0,0x2261}
		,{0xF1,0xB1}
		,{0xF2,0x2265}
		,{0xF3,0x2264}
		,{0xF4,0x2320}
		,{0xF5,0x2321}
		,{0xF6,0xF7}
		,{0xF7,0x2248}
		,{0xF8,0xB0}
		,{0xF9,0x2219}
		,{0xFA,0xB7}
		,{0xFB,0x221A}
		,{0xFC,0x207F}
		,{0xFD,0xB2}
		,{0xFE,0x25A0}
		,{0xFF,0xA0}
		};

		char16_t cp437ToUnicode(char ch437) {
			return cp437ToUnicodeMap[ch437];
		}
	
		uint8_t UnicodeToCP437(char16_t unicode) {
			uint8_t result{'?'};
			auto iter = std::find_if(cp437ToUnicodeMap.begin(),cp437ToUnicodeMap.end(),[&unicode](auto const& entry){
				return entry.second == unicode;
			});
			if (iter != cp437ToUnicodeMap.end()) result = iter->first;
      if (false) {
        std::cout << "\nUnicodeToCP437(unicode:" << std::hex << static_cast<unsigned int>(unicode) << ") --> " << static_cast<unsigned int>(result) << std::dec;
      }
			return result;
		} 

		cratchit_unicode_string cp437ToUnicode(std::string s437) {
			cratchit_unicode_string result{};
      if (false) {
        std::cout << "\ncp437ToUnicode(" << std::quoted(s437) << ")";
      }
			std::transform(s437.begin(),s437.end(),std::back_inserter(result),[](char ch){
				return charset::CP437::cp437ToUnicode(ch);
			});
      if (false) {
        std::cout << "\ncp437ToUnicode(";
        for (auto ch : s437) std::cout << " " << std::hex << static_cast<unsigned int>(ch) << std::dec;
        std::cout << ") --> \"";
        for (auto ch : result) std::cout << " " << std::hex << static_cast<unsigned int>(ch) << std::dec;
        std::cout << "\"";
      }

			return result;
		}

	} // namespace CP437

} // namespace charset